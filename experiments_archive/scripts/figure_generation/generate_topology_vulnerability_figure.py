#!/usr/bin/env python3
"""
Generate academic-style topology vulnerability analysis figures as alternatives to radar chart.

Options:
1. Grouped bar chart showing attack success by topology and attack type
2. Topology vulnerability heatmap
3. Multi-panel comparison chart
"""

import json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

# Set up matplotlib for publication-quality figures
plt.rcParams.update({
    'font.family': ['Arial', 'DejaVu Sans', 'Helvetica', 'sans-serif'],
    'font.size': 11,
    'axes.titlesize': 14,
    'axes.labelsize': 12,
    'xtick.labelsize': 10,
    'ytick.labelsize': 10,
    'legend.fontsize': 10,
    'figure.dpi': 300,
    'savefig.dpi': 300,
    'savefig.bbox': 'tight',
    'savefig.pad_inches': 0.15,
    'axes.linewidth': 1.0,
    'xtick.major.width': 1.0,
    'ytick.major.width': 1.0,
    'axes.edgecolor': '#333333',
    'text.color': '#333333'
})

def load_experimental_data():
    """Load Phase 1 experimental data."""
    with open('results_phase1/rerun_attack_results.json', 'r') as f:
        phase1_data = json.load(f)
    return phase1_data

def extract_topology_attack_data(experiments):
    """Extract attack success data by topology and attack type."""
    
    data = []
    for exp in experiments:
        config = exp['config']
        
        # Get topology and basic info
        topology = config.get('topology', 'unknown')
        dataset = config.get('dataset', 'unknown')
        node_count = config.get('node_count', 0)
        
        # Only include non-DP experiments for cleaner topology comparison
        dp_setting = config.get('dp_setting', {})
        if dp_setting.get('enabled', False):
            continue
        
        # Get all attack results
        if 'attack_results' in exp and 'attack_results' in exp['attack_results']:
            attack_results = exp['attack_results']['attack_results']
            
            for attack in attack_results:
                if 'attack_success_metric' in attack and 'attack_name' in attack:
                    # Map attack names to standardized types
                    attack_name = attack['attack_name'].lower()
                    if 'communication' in attack_name or 'pattern' in attack_name:
                        attack_type = 'Communication\nPattern'
                    elif 'magnitude' in attack_name or 'parameter' in attack_name:
                        attack_type = 'Parameter\nMagnitude'
                    elif 'topology' in attack_name or 'structure' in attack_name:
                        attack_type = 'Topology\nStructure'
                    else:
                        continue
                    
                    data.append({
                        'topology': topology.title(),
                        'attack_type': attack_type,
                        'attack_success': attack['attack_success_metric'],
                        'dataset': dataset,
                        'node_count': node_count,
                        'experiment_name': exp['experiment_name']
                    })
    
    return pd.DataFrame(data)

def generate_grouped_bar_chart(df, output_dir):
    """Generate Option 1: Grouped bar chart by topology and attack type."""
    
    print("Generating topology vulnerability grouped bar chart...")
    
    # Calculate mean success rates by topology and attack type
    summary = df.groupby(['topology', 'attack_type'])['attack_success'].agg(['mean', 'std', 'count']).reset_index()
    
    # Create pivot for easier plotting
    pivot_mean = summary.pivot(index='topology', columns='attack_type', values='mean')
    pivot_std = summary.pivot(index='topology', columns='attack_type', values='std')
    
    # Create the grouped bar chart
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # Define topology order and colors
    topology_order = ['Star', 'Complete', 'Ring', 'Line']
    attack_types = ['Communication\nPattern', 'Parameter\nMagnitude', 'Topology\nStructure']
    colors = ['#2E86AB', '#A23B72', '#F18F01']  # Professional color palette
    
    # Set up bar positions
    x = np.arange(len(topology_order))
    width = 0.25
    
    # Create bars for each attack type
    for i, attack_type in enumerate(attack_types):
        means = [pivot_mean.loc[topo, attack_type] if topo in pivot_mean.index else 0 
                for topo in topology_order]
        stds = [pivot_std.loc[topo, attack_type] if topo in pivot_std.index else 0 
               for topo in topology_order]
        
        bars = ax.bar(x + i*width, means, width, 
                     label=attack_type, color=colors[i], alpha=0.8,
                     yerr=stds, capsize=4)
        
        # Add value labels on bars
        for j, (bar, mean) in enumerate(zip(bars, means)):
            if mean > 0:
                ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01,
                       f'{mean:.1%}', ha='center', va='bottom', fontsize=9, fontweight='bold')
    
    # Customize the plot
    ax.set_xlabel('Network Topology', fontsize=12, fontweight='600')
    ax.set_ylabel('Attack Success Rate', fontsize=12, fontweight='600')
    ax.set_title('Topology-Specific Attack Vulnerability Analysis', fontsize=14, fontweight='700')
    ax.set_xticks(x + width)
    ax.set_xticklabels(topology_order)
    ax.set_ylim(0, 1.0)
    
    # Add grid for better readability
    ax.grid(True, axis='y', alpha=0.3, linewidth=0.5)
    ax.set_axisbelow(True)
    
    # Customize legend
    ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', frameon=False)
    
    # Remove top and right spines
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    
    plt.tight_layout()
    
    # Save figure
    output_path = output_dir / 'fig2_topology_vulnerability_bars.pdf'
    plt.savefig(output_path, format='pdf', bbox_inches='tight', dpi=300)
    plt.savefig(output_path.with_suffix('.png'), format='png', bbox_inches='tight', dpi=300)
    print(f"Saved grouped bar chart to {output_path}")
    plt.close()

def generate_topology_heatmap(df, output_dir):
    """Generate Option 2: Topology vulnerability heatmap."""
    
    print("Generating topology vulnerability heatmap...")
    
    # Calculate mean success rates
    heatmap_data = df.groupby(['topology', 'attack_type'])['attack_success'].mean().unstack(fill_value=0)
    
    # Reorder for better presentation
    topology_order = ['Star', 'Complete', 'Ring', 'Line']
    attack_order = ['Communication\nPattern', 'Parameter\nMagnitude', 'Topology\nStructure']
    
    # Reindex to ensure proper ordering
    heatmap_data = heatmap_data.reindex(topology_order).reindex(columns=attack_order)
    
    # Create the heatmap
    fig, ax = plt.subplots(figsize=(10, 8))
    
    # Custom colormap - blue to red
    from matplotlib.colors import LinearSegmentedColormap
    colors = ['#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061']
    cmap = LinearSegmentedColormap.from_list('custom_blues', colors, N=100)
    
    # Create heatmap
    sns.heatmap(heatmap_data, 
                annot=True, 
                fmt='.1%',
                cmap=cmap,
                cbar_kws={'label': 'Attack Success Rate', 'shrink': 0.8},
                square=False,
                linewidths=1,
                linecolor='white',
                annot_kws={'size': 12, 'weight': 'bold'},
                vmin=0, 
                vmax=1,
                ax=ax)
    
    # Customize the plot
    ax.set_xlabel('Attack Type', fontsize=12, fontweight='600')
    ax.set_ylabel('Network Topology', fontsize=12, fontweight='600')
    ax.set_title('Topology Vulnerability Matrix', fontsize=14, fontweight='700')
    
    # Rotate labels for better readability
    ax.set_xticklabels(ax.get_xticklabels(), rotation=0, ha='center')
    ax.set_yticklabels(ax.get_yticklabels(), rotation=0)
    
    plt.tight_layout()
    
    # Save figure
    output_path = output_dir / 'fig2_topology_vulnerability_heatmap.pdf'
    plt.savefig(output_path, format='pdf', bbox_inches='tight', dpi=300)
    plt.savefig(output_path.with_suffix('.png'), format='png', bbox_inches='tight', dpi=300)
    print(f"Saved vulnerability heatmap to {output_path}")
    plt.close()

def generate_multi_panel_comparison(df, output_dir):
    """Generate Option 3: Multi-panel comparison chart."""
    
    print("Generating multi-panel topology comparison...")
    
    # Create subplot figure
    fig, axes = plt.subplots(1, 3, figsize=(16, 6), sharey=True)
    
    attack_types = ['Communication\nPattern', 'Parameter\nMagnitude', 'Topology\nStructure']
    topology_order = ['Star', 'Complete', 'Ring', 'Line']
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']
    
    for i, attack_type in enumerate(attack_types):
        ax = axes[i]
        
        # Filter data for this attack type
        attack_data = df[df['attack_type'] == attack_type]
        
        # Calculate means and std for each topology
        stats = attack_data.groupby('topology')['attack_success'].agg(['mean', 'std', 'count'])
        
        # Plot bars
        x_pos = range(len(topology_order))
        means = [stats.loc[topo, 'mean'] if topo in stats.index else 0 for topo in topology_order]
        stds = [stats.loc[topo, 'std'] if topo in stats.index else 0 for topo in topology_order]
        
        bars = ax.bar(x_pos, means, color=colors, alpha=0.7, 
                     yerr=stds, capsize=4)
        
        # Add value labels
        for j, (bar, mean) in enumerate(zip(bars, means)):
            if mean > 0:
                ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.02,
                       f'{mean:.1%}', ha='center', va='bottom', fontsize=10, fontweight='bold')
        
        # Customize subplot
        ax.set_title(attack_type, fontsize=12, fontweight='600')
        ax.set_xticks(x_pos)
        ax.set_xticklabels(topology_order, rotation=45, ha='right')
        ax.grid(True, axis='y', alpha=0.3)
        ax.set_ylim(0, 1.0)
        
        # Remove spines
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
    
    # Set common y-label
    axes[0].set_ylabel('Attack Success Rate', fontsize=12, fontweight='600')
    
    # Add overall title
    fig.suptitle('Attack Success Rates by Network Topology', fontsize=14, fontweight='700', y=1.02)
    
    plt.tight_layout()
    
    # Save figure
    output_path = output_dir / 'fig2_topology_vulnerability_panels.pdf'
    plt.savefig(output_path, format='pdf', bbox_inches='tight', dpi=300)
    plt.savefig(output_path.with_suffix('.png'), format='png', bbox_inches='tight', dpi=300)
    print(f"Saved multi-panel comparison to {output_path}")
    plt.close()

def main():
    """Generate all topology vulnerability figure alternatives."""
    
    print("Loading experimental data...")
    data = load_experimental_data()
    
    print("Extracting topology-attack data...")
    df = extract_topology_attack_data(data)
    
    if len(df) == 0:
        print("No topology data found!")
        return
    
    print(f"Found {len(df)} topology-attack combinations")
    print(f"Topologies: {df['topology'].unique()}")
    print(f"Attack types: {df['attack_type'].unique()}")
    
    # Set output directory
    output_dir = Path('analysis')
    output_dir.mkdir(exist_ok=True)
    
    # Generate all three alternatives
    generate_grouped_bar_chart(df, output_dir)
    generate_topology_heatmap(df, output_dir)
    generate_multi_panel_comparison(df, output_dir)
    
    print("\nAll topology vulnerability figures generated successfully!")
    print("Options available:")
    print("1. fig2_topology_vulnerability_bars.pdf - Grouped bar chart (recommended)")
    print("2. fig2_topology_vulnerability_heatmap.pdf - Vulnerability matrix")
    print("3. fig2_topology_vulnerability_panels.pdf - Multi-panel comparison")

if __name__ == "__main__":
    main()